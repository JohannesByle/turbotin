//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var Notifications = newNotificationsTable("turbotin", "notifications", "")

type notificationsTable struct {
	mysql.Table

	// Columns
	ID            mysql.ColumnInteger
	CreatedAt     mysql.ColumnTimestamp
	UpdatedAt     mysql.ColumnTimestamp
	DeletedAt     mysql.ColumnTimestamp
	UserID        mysql.ColumnInteger
	TagID         mysql.ColumnInteger
	MaxPrice      mysql.ColumnInteger
	Stores        mysql.ColumnString
	ExcludeStores mysql.ColumnBool

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type NotificationsTable struct {
	notificationsTable

	NEW notificationsTable
}

// AS creates new NotificationsTable with assigned alias
func (a NotificationsTable) AS(alias string) *NotificationsTable {
	return newNotificationsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new NotificationsTable with assigned schema name
func (a NotificationsTable) FromSchema(schemaName string) *NotificationsTable {
	return newNotificationsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new NotificationsTable with assigned table prefix
func (a NotificationsTable) WithPrefix(prefix string) *NotificationsTable {
	return newNotificationsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new NotificationsTable with assigned table suffix
func (a NotificationsTable) WithSuffix(suffix string) *NotificationsTable {
	return newNotificationsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newNotificationsTable(schemaName, tableName, alias string) *NotificationsTable {
	return &NotificationsTable{
		notificationsTable: newNotificationsTableImpl(schemaName, tableName, alias),
		NEW:                newNotificationsTableImpl("", "new", ""),
	}
}

func newNotificationsTableImpl(schemaName, tableName, alias string) notificationsTable {
	var (
		IDColumn            = mysql.IntegerColumn("id")
		CreatedAtColumn     = mysql.TimestampColumn("created_at")
		UpdatedAtColumn     = mysql.TimestampColumn("updated_at")
		DeletedAtColumn     = mysql.TimestampColumn("deleted_at")
		UserIDColumn        = mysql.IntegerColumn("user_id")
		TagIDColumn         = mysql.IntegerColumn("tag_id")
		MaxPriceColumn      = mysql.IntegerColumn("max_price")
		StoresColumn        = mysql.StringColumn("stores")
		ExcludeStoresColumn = mysql.BoolColumn("exclude_stores")
		allColumns          = mysql.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, UserIDColumn, TagIDColumn, MaxPriceColumn, StoresColumn, ExcludeStoresColumn}
		mutableColumns      = mysql.ColumnList{CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, UserIDColumn, TagIDColumn, MaxPriceColumn, StoresColumn, ExcludeStoresColumn}
	)

	return notificationsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:            IDColumn,
		CreatedAt:     CreatedAtColumn,
		UpdatedAt:     UpdatedAtColumn,
		DeletedAt:     DeletedAtColumn,
		UserID:        UserIDColumn,
		TagID:         TagIDColumn,
		MaxPrice:      MaxPriceColumn,
		Stores:        StoresColumn,
		ExcludeStores: ExcludeStoresColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
