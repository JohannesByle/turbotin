//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var TagToTags = newTagToTagsTable("turbotin", "tag_to_tags", "")

type tagToTagsTable struct {
	mysql.Table

	// Columns
	ID          mysql.ColumnInteger
	CreatedAt   mysql.ColumnTimestamp
	UpdatedAt   mysql.ColumnTimestamp
	DeletedAt   mysql.ColumnTimestamp
	TagID       mysql.ColumnInteger
	ParentTagID mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type TagToTagsTable struct {
	tagToTagsTable

	NEW tagToTagsTable
}

// AS creates new TagToTagsTable with assigned alias
func (a TagToTagsTable) AS(alias string) *TagToTagsTable {
	return newTagToTagsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TagToTagsTable with assigned schema name
func (a TagToTagsTable) FromSchema(schemaName string) *TagToTagsTable {
	return newTagToTagsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new TagToTagsTable with assigned table prefix
func (a TagToTagsTable) WithPrefix(prefix string) *TagToTagsTable {
	return newTagToTagsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new TagToTagsTable with assigned table suffix
func (a TagToTagsTable) WithSuffix(suffix string) *TagToTagsTable {
	return newTagToTagsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newTagToTagsTable(schemaName, tableName, alias string) *TagToTagsTable {
	return &TagToTagsTable{
		tagToTagsTable: newTagToTagsTableImpl(schemaName, tableName, alias),
		NEW:            newTagToTagsTableImpl("", "new", ""),
	}
}

func newTagToTagsTableImpl(schemaName, tableName, alias string) tagToTagsTable {
	var (
		IDColumn          = mysql.IntegerColumn("id")
		CreatedAtColumn   = mysql.TimestampColumn("created_at")
		UpdatedAtColumn   = mysql.TimestampColumn("updated_at")
		DeletedAtColumn   = mysql.TimestampColumn("deleted_at")
		TagIDColumn       = mysql.IntegerColumn("tag_id")
		ParentTagIDColumn = mysql.IntegerColumn("parent_tag_id")
		allColumns        = mysql.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, TagIDColumn, ParentTagIDColumn}
		mutableColumns    = mysql.ColumnList{CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, TagIDColumn, ParentTagIDColumn}
	)

	return tagToTagsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		CreatedAt:   CreatedAtColumn,
		UpdatedAt:   UpdatedAtColumn,
		DeletedAt:   DeletedAtColumn,
		TagID:       TagIDColumn,
		ParentTagID: ParentTagIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
