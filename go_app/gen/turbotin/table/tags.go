//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var Tags = newTagsTable("turbotin", "tags", "")

type tagsTable struct {
	mysql.Table

	// Columns
	ID         mysql.ColumnInteger
	CreatedAt  mysql.ColumnTimestamp
	UpdatedAt  mysql.ColumnTimestamp
	DeletedAt  mysql.ColumnTimestamp
	Value      mysql.ColumnString
	CategoryID mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type TagsTable struct {
	tagsTable

	NEW tagsTable
}

// AS creates new TagsTable with assigned alias
func (a TagsTable) AS(alias string) *TagsTable {
	return newTagsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TagsTable with assigned schema name
func (a TagsTable) FromSchema(schemaName string) *TagsTable {
	return newTagsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new TagsTable with assigned table prefix
func (a TagsTable) WithPrefix(prefix string) *TagsTable {
	return newTagsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new TagsTable with assigned table suffix
func (a TagsTable) WithSuffix(suffix string) *TagsTable {
	return newTagsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newTagsTable(schemaName, tableName, alias string) *TagsTable {
	return &TagsTable{
		tagsTable: newTagsTableImpl(schemaName, tableName, alias),
		NEW:       newTagsTableImpl("", "new", ""),
	}
}

func newTagsTableImpl(schemaName, tableName, alias string) tagsTable {
	var (
		IDColumn         = mysql.IntegerColumn("id")
		CreatedAtColumn  = mysql.TimestampColumn("created_at")
		UpdatedAtColumn  = mysql.TimestampColumn("updated_at")
		DeletedAtColumn  = mysql.TimestampColumn("deleted_at")
		ValueColumn      = mysql.StringColumn("value")
		CategoryIDColumn = mysql.IntegerColumn("category_id")
		allColumns       = mysql.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, ValueColumn, CategoryIDColumn}
		mutableColumns   = mysql.ColumnList{CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, ValueColumn, CategoryIDColumn}
	)

	return tagsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		CreatedAt:  CreatedAtColumn,
		UpdatedAt:  UpdatedAtColumn,
		DeletedAt:  DeletedAtColumn,
		Value:      ValueColumn,
		CategoryID: CategoryIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
