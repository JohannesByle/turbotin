//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var Users = newUsersTable("turbotin", "users", "")

type usersTable struct {
	mysql.Table

	// Columns
	ID                   mysql.ColumnInteger
	CreatedAt            mysql.ColumnTimestamp
	UpdatedAt            mysql.ColumnTimestamp
	DeletedAt            mysql.ColumnTimestamp
	Email                mysql.ColumnString
	Password             mysql.ColumnString
	EmailVerified        mysql.ColumnBool
	EmailCode            mysql.ColumnString
	PasswordResetCode    mysql.ColumnString
	LastEmailTime        mysql.ColumnTimestamp
	EmailCodeCreated     mysql.ColumnTimestamp
	PasswordResetCreated mysql.ColumnTimestamp
	IsAdmin              mysql.ColumnBool

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type UsersTable struct {
	usersTable

	NEW usersTable
}

// AS creates new UsersTable with assigned alias
func (a UsersTable) AS(alias string) *UsersTable {
	return newUsersTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UsersTable with assigned schema name
func (a UsersTable) FromSchema(schemaName string) *UsersTable {
	return newUsersTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UsersTable with assigned table prefix
func (a UsersTable) WithPrefix(prefix string) *UsersTable {
	return newUsersTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UsersTable with assigned table suffix
func (a UsersTable) WithSuffix(suffix string) *UsersTable {
	return newUsersTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUsersTable(schemaName, tableName, alias string) *UsersTable {
	return &UsersTable{
		usersTable: newUsersTableImpl(schemaName, tableName, alias),
		NEW:        newUsersTableImpl("", "new", ""),
	}
}

func newUsersTableImpl(schemaName, tableName, alias string) usersTable {
	var (
		IDColumn                   = mysql.IntegerColumn("id")
		CreatedAtColumn            = mysql.TimestampColumn("created_at")
		UpdatedAtColumn            = mysql.TimestampColumn("updated_at")
		DeletedAtColumn            = mysql.TimestampColumn("deleted_at")
		EmailColumn                = mysql.StringColumn("email")
		PasswordColumn             = mysql.StringColumn("password")
		EmailVerifiedColumn        = mysql.BoolColumn("email_verified")
		EmailCodeColumn            = mysql.StringColumn("email_code")
		PasswordResetCodeColumn    = mysql.StringColumn("password_reset_code")
		LastEmailTimeColumn        = mysql.TimestampColumn("last_email_time")
		EmailCodeCreatedColumn     = mysql.TimestampColumn("email_code_created")
		PasswordResetCreatedColumn = mysql.TimestampColumn("password_reset_created")
		IsAdminColumn              = mysql.BoolColumn("is_admin")
		allColumns                 = mysql.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, EmailColumn, PasswordColumn, EmailVerifiedColumn, EmailCodeColumn, PasswordResetCodeColumn, LastEmailTimeColumn, EmailCodeCreatedColumn, PasswordResetCreatedColumn, IsAdminColumn}
		mutableColumns             = mysql.ColumnList{CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, EmailColumn, PasswordColumn, EmailVerifiedColumn, EmailCodeColumn, PasswordResetCodeColumn, LastEmailTimeColumn, EmailCodeCreatedColumn, PasswordResetCreatedColumn, IsAdminColumn}
	)

	return usersTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                   IDColumn,
		CreatedAt:            CreatedAtColumn,
		UpdatedAt:            UpdatedAtColumn,
		DeletedAt:            DeletedAtColumn,
		Email:                EmailColumn,
		Password:             PasswordColumn,
		EmailVerified:        EmailVerifiedColumn,
		EmailCode:            EmailCodeColumn,
		PasswordResetCode:    PasswordResetCodeColumn,
		LastEmailTime:        LastEmailTimeColumn,
		EmailCodeCreated:     EmailCodeCreatedColumn,
		PasswordResetCreated: PasswordResetCreatedColumn,
		IsAdmin:              IsAdminColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
